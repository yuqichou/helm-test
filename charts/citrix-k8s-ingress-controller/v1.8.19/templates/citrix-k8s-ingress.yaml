{{- if .Values.openshift }}
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
{{- else }}
apiVersion: apps/v1
kind: Deployment
{{- end}}
metadata:
  name: cic-k8s-ingress-controller
spec:
  selector:
{{- if .Values.openshift }}
     router: cic-k8s-ingress-controller
{{- else }}
    matchLabels:
      app: cic-k8s-ingress-controller
{{- end}}
  replicas: 1
{{- if .Values.openshift }}
  strategy:
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 0
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
{{- end}}
  template:
    metadata:
      name: cic-k8s-ingress-controller
      labels:
{{- if .Values.openshift }}
        router: cic-k8s-ingress-controller
{{- else }}
        app: cic-k8s-ingress-controller
{{- end}}
    spec:
      serviceAccountName: cic-k8s-role
      containers:
      - name: cic-k8s-ingress-controller
        image: "{{ .Values.image }}"
        imagePullPolicy: {{ .Values.pullPolicy }}
        args:
          - --configmap
            {{ .Release.Namespace }}/cic-configmap
{{- if .Values.defaultSSLCert }}
          - --default-ssl-certificate
            {{ .Release.Namespace }}/{{ .Values.defaultSSLCert }}
{{- end }}
{{- if .Values.ingressClass }}
          - --ingress-class
{{- range .Values.ingressClass}}
            {{.}}
{{- end }}
{{- end }}
          - --feature-node-watch
            {{ .Values.nodeWatch }}
{{- if .Values.ipam }}
          - --ipam
            citrix-ipam-controller
{{- end }}
        env:
        - name: "NS_IP"
          value: "{{ .Values.nsIP }}"
{{- if .Values.nsVIP }}
        - name: "NS_VIP"
          value: "{{ .Values.nsVIP }}"
{{- end}}
        - name: "NS_USER"
          valueFrom:
            secretKeyRef:
              name: {{ .Values.loginFileName }}
              key: username
        - name: "NS_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: {{ .Values.loginFileName }}
              key: password
        - name: "EULA"
          value: "{{ .Values.license.accept }}"
        - name: "NS_APPS_NAME_PREFIX"
          value: {{ .Values.nsNamespace | default "k8s"}}
{{- if .Values.kubernetesURL }}
        - name: "kubernetes_url"
          value: "{{ .Values.kubernetesURL }}"
{{- end}}
{{- if .Values.logProxy }}
        - name: "NS_LOGPROXY"
          value: "{{ .Values.logProxy }}"
{{- end }}
{{- if .Values.exporter.required }}
      - name: exporter
        image: "{{ .Values.exporter.image }}"
        imagePullPolicy: {{ .Values.exporter.pullPolicy }}
        args:
          - "--target-nsip={{ .Values.nsIP }}"
          - "--port={{ .Values.exporter.ports.containerPort }}"
        volumeMounts:
          - name: nslogin
            mountPath: "/mnt/nslogin"
            readOnly: true
        securityContext:
          readOnlyRootFilesystem: true
      volumes:
      - name: nslogin
        secret:
          secretName: {{ .Values.loginFileName }}
{{- end }}
---

{{- if .Values.exporter.required }}


apiVersion: v1
kind: Service
metadata:
   name: exporter
   labels:
     app: exporter
     service-type: citrix-adc-monitor
spec:
   type: ClusterIP
   ports:
   - port: {{ .Values.exporter.ports.containerPort }}
     targetPort: {{ .Values.exporter.ports.containerPort }}
     name: exporter-port
   selector:
{{- if .Values.openshift }}
     router: cic-k8s-ingress-controller
{{- else }}
     app: cic-k8s-ingress-controller
{{- end }}

---

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
 name: citrix-adc-servicemonitor
 labels:
   servicemonitor: citrix-adc
spec:
 endpoints:
 - interval: 30s
   port: exporter-port
 selector:
   matchLabels:
     service-type: citrix-adc-monitor
 namespaceSelector:
   matchNames:
   - monitoring
   - default
   - {{ .Release.Namespace }}

{{- end }}
